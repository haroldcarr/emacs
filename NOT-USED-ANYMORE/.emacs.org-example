#+TITLE:  Harold Carr's Emacs Configuration File
#+AUTHOR: Harold Carr
#+DESCRIPTION: literate version of my .emacs file.
#+PROPERTY:    results silent
#+PROPERTY:    tangle /tmp/.emacs.el-example
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:nil todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js


#  Before you can build this on a new system, make sure that you put
#  the cursor over any of the above properties, and hit: =C-c C-c=

Harold Carr's =.emacs= file, written using [[http://www.orgmode.org][org-mode]].

  - =tab= opens/close a particular section
  - Shift =tab= cycles between the outline and full text
  - Tangle it with:  =C-c C-v t=
    - Creates:  =/tmp/.emacs.el-example=
    - =cp= to the appropriate location

* Introduction

#+NAME: Note
#+BEGIN_SRC emacs-lisp :comments off
  ;;; ------------------------------------------
  ;;; Do not edit the generated *.el file.
  ;;; It was generated from a org-mode "literate" version.
  ;;; ------------------------------------------
#+END_SRC

** Installing Dependencies

   Emacs already comes bundled to edit most files, like Java and Ruby.
   However, some of the new stuff that I use isn't bundled, yet.

*** Version 23

   To begin installing these new packages in version 23, you need [[http://tromey.com/elpa/install.html][ELPA]]
   (Emacs Package Manager).  Simply hit =C-c C-c= in the buffer below
   to get that installed (if that fails, then you need to go to the
   last paren and hit =C-x C-e=).

#+BEGIN_SRC emacs-lisp :tangle no :results silent
  (let ((buffer (url-retrieve-synchronously
                 "http://tromey.com/elpa/package-install.el")))
    (save-excursion
      (message "Completed download of %s" buffer)
      (set-buffer buffer)
      (goto-char (point-min))
      (re-search-forward "^$" nil 'move)
      (eval-region (point) (point-max))
      (kill-buffer (current-buffer))))
#+END_SRC

   This code writes some magic to the =~/.emacs= file, so make sure
   you get rid of it at some point.

   What I really like is the extra packages contained in the more
   up-to-date [[http://marmalade-repo.org/][Marmalade repository]], but this seems to like a
   /different/ version of =package.el=, so execute this bit of magic
   to re-download the correct version.

#+BEGIN_SRC sh :tangle no :results silent
  curl -o ~/.emacs.d/elpa/package.el "http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el"
  # wget "http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el" -O ~/.emacs.d/elpa/package.el
#+END_SRC

   Run the following (with a =C-x C-e= on the last paren) to install
   and start up the package manager:

#+BEGIN_SRC emacs-lisp :tangle no :results silent
  (let ()
    (load "~/.emacs.d/elpa/package.el")
    (require 'package)
    (add-to-list 'package-archives
                 '("marmalade" . "http://marmalade-repo.org/packages/") t)
    (package-initialize)
    (package-refresh-contents)
    (package-list-packages))
#+END_SRC

*** Install Needed Packages

    Here is the list that should be installed to begin.
    Install them all with a =C-c C-c= inside this block:

#+BEGIN_SRC emacs-lisp :tangle no
  (let ((my-packages (list

   'ac-nrepl
   'auto-complete
   'clojure-mode
   'clojurescript-mode
   'coffee-mode
   'color-theme
   'color-theme-sanityinc-tomorrow
   'elein
   'flymake
   'flymake-jshint
   'flyspell
   'git-commit-mode
   'gitconfig-mode
   'gitignore-mode
   'graphviz-dot-mode
   'handlebars-mode
   'htmlize
   'js-comint
   'js2-mode
   'json-mode
   'mac-key-mode
   'magit
   'magit-simple-keys
   'markdown-mode
   'mustache-mode
   'nlinum
   'nrepl
   'org
   'org-mime
   'org-presie
   'paredit
   'plantuml-mode
   'redo+
   'scala-mode
   'smex
   'yasnippet
   'yasnippet-bundle

    )))

    (unless package-archive-contents
      (package-refresh-contents))
    (dolist (package my-packages)
       (unless (package-installed-p package)
        (package-install package))))

#+END_SRC

   Anything that you don't install above, may cause problems in the
   code below.  So, either install it, or comment out its code section
   (by adding a =:tangle no= at the end of the first line of code).

   The following sections discuss installation of libraries that are
   not available via ELPA.

*** PlantUML

    The [[http://plantuml.sourceforge.net][PlantUML project]] allows you to draw UML diagrams with textual descriptions.
    A sweet feature for literate programmers. Download [[http://plantuml.sourceforge.net/download.html][the Jar file]] and put it in
    your =bin= directory:

#+BEGIN_EXAMPLE
  curl -o ~/bin/plantuml.jar http://sourceforge.net/projects/plantuml/files/plantuml.jar/download
#+END_EXAMPLE

*** Org-Mode Installation

    The [[http://orgmode.org][org-mode]] program is so critical, that I want a version > 7.9.
    Download a version and un-pack it in =~/.emacs.d= and create a
    symlink to it called: =~/.emacs.d/org=

    From this point, we expect this it to be in this spot.

*** Ensime Installation

    [[https://github.com/aemoncannon/ensime][Ensime]] is an enhanced mode for Scala. Complete instructions are
    on the github page, but it amounts to 

    - [[https://github.com/aemoncannon/ensime/downloads][Download a distribution]]
    - Positioning: =cd ~/.emacs=
    - Extracting: =tar xvf ~/Downloads/ensime_2.9.2-0.9.8.1.tar= (or equivalent)
    - Symlinking: =ln -s ensime_2.9.2-0.9.8.1 ensime=

    That should do 'er.

*** JavaScript Lint

    Assuming that you have [[http://nodejs.org][node.js]] installed, you should install
    [[http://www.jshint.com][jshint]] as a global command:

#+BEGIN_EXAMPLE
  sudo npm -g install jshint
#+END_EXAMPLE

    Now you can customize the [[*JavaScript][JavaScript]] section.

**** Checking out the Ensime Source Code

     You could check out the ensime source code and compiling a
     version. As long as we have a =~/.emacs.d/ensime/elisp= that we
     can load, we are golden...

#+BEGIN_EXAMPLE
  git clone https://github.com/aemoncannon/ensime.git
  cd ~/.emacs.d/ensime
  ln -s dist_2.9.2/elisp .
#+END_EXAMPLE

*** ISpell

    The spelling feature in Emacs using =ispell=, so this should be
    installed with something like Homebrew:

#+BEGIN_SRC sh :tangle no
brew install ispell
#+END_SRC

*** Support for GMAIL

    While reading email in Emacs is generally "fine", I like to use
    it because I can create direct links between my notes and the
    mail messages I get.

    To send email through Gmail, you'll need the TLS package
    installed. Using [[http://mxcl.github.com/homebrew/][Homebrew]] is simple enough:

#+BEGIN_SRC sh :tangle no
  brew install gnutls
#+END_SRC

* General Settings

** Extra Packages

   Extra packages not available via the package manager go in my
   personal stash at: =$HOME/.emacs.d=

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/")
#+END_SRC

** Package Manager

   Emacs has become like every other operating system, and now has a
   [[http://tromey.com/elpa/][package manager]] with its own collection of repositories. Of
   course, now, instead of trying to figure out and maintain
   packages, we have to keep track of what packages live on what
   repos. This is [[http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/][an improvement]].

   *NB:* We want to add the [[http://marmalade-repo.org/][Marmalade repository]].

#+BEGIN_SRC emacs-lisp
  ; (load "~/.emacs.d/elpa/package.el") Needed for version 23 only!

  (require 'package)

  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("tromey"    . "http://tromey.com/elpa/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC

   While we can now do a =package-list-packages=, you can install and
   everything is good, however, we can't =require= any of these
   packages (in order to customize them in this file) until we do
   this:

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

** Variables

   General settings about me that other packages can use. The biggest
   problem is guessing my email address based on what computer I am using:

#+BEGIN_SRC emacs-lisp
  (if (equal "habrams" user-login-name)
      (setq user-mail-address "habrams@gilt.com")
    (setq user-mail-address "howard.abrams@gmail.com"))
#+END_SRC

*** Tabs vs Spaces

   I have learned to distrust tabs in my source code, so let's make
   sure that we only have spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
#+END_SRC

** Font Settings

   I love syntax highlighting.

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode 1)
#+END_SRC

   Specify the default font as =Source Code Pro=, which should already
   be [[http://blogs.adobe.com/typblography/2012/09/source-code-pro.html][downloaded]] and installed.

#+BEGIN_SRC emacs-lisp
  (set-default-font "Source Code Pro")
  (set-face-attribute 'default nil :font "Source Code Pro" :height 140)
  (set-face-font 'default "Source Code Pro")
#+END_SRC

   While I do like the =Anonymous Pro= font (and usually have it download and
   installed), I don't like it as much.

#+BEGIN_SRC emacs-lisp :tangle no
  (set-default-font "Anonymous Pro")
  (set-face-attribute 'default nil :font "Anonymous Pro" :height 140)
  (set-face-font 'default "Anonymous Pro")
#+END_SRC

** Color Theme

   We use the color theme project and followed [[http://www.nongnu.org/color-theme/][these instructions]].
   We now can do =M-x color-theme-<TAB> RET=

#+BEGIN_SRC emacs-lisp
  (require 'color-theme)
#+END_SRC

   The color themes work quite well, except they don't know about the
   org-mode source code blocks, so we need to set up a couple
   functions that we can use to set them.

#+BEGIN_SRC emacs-lisp
  (defun org-src-color-blocks-light ()
    "Colors the block headers and footers to make them stand out more for lighter themes"
    (interactive)
    (custom-set-faces
     '(org-block-begin-line 
      ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
     '(org-block-background
       ((t (:background "#FFFFEA"))))
     '(org-block-end-line
       ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))))

     ;; Looks like the minibuffer issues are only for v23
     ; (set-face-foreground 'minibuffer "black")
     ; (set-face-foreground 'minibuffer-prompt "red")
  )
  
  (defun org-src-color-blocks-dark ()
    "Colors the block headers and footers to make them stand out more for dark themes"
    (interactive)
    (custom-set-faces
     '(org-block-begin-line 
       ((t (:foreground "#008ED1" :background "#002E41"))))
     '(org-block-background
       ((t (:background "#111111"))))
     '(org-block-end-line
       ((t (:foreground "#008ED1" :background "#002E41")))))
  
     ;; Looks like the minibuffer issues are only for v23
     ; (set-face-foreground 'minibuffer "white")
     ; (set-face-foreground 'minibuffer-prompt "white")
  )
#+END_SRC

   My main reason for wanting to use the color theme project is to
   switch between /black on white/ during the day, and /white on
   black/ at night.

#+BEGIN_SRC emacs-lisp
  (defun color-theme-my-default ()
    "Tries to set up a normal color scheme"
    (interactive)
    (color-theme-sanityinc-tomorrow-day)
    (org-src-color-blocks-light))
  
  ;; During the day, we use the "standard" theme:
  (global-set-key (kbd "<f9> d") 'color-theme-my-default)
  
  ;; A good late-night scheme that isn't too harsh
  (global-set-key (kbd "<f9> l") (lambda () (interactive)
                                   (color-theme-sanityinc-tomorrow-eighties)
                                   (org-src-color-blocks-dark)))
  
  ;; Programming late into the night
  (global-set-key (kbd "<f9> m") (lambda () (interactive)
                                   (color-theme-sanityinc-tomorrow-bright)
                                   (org-src-color-blocks-dark)))
  
  ;; Too harsh? Use the late night theme
  (global-set-key (kbd "<f9> n") (lambda () (interactive)
                                   (color-theme-sanityinc-tomorrow-night)
                                   (org-src-color-blocks-dark)))
#+END_SRC

** Macintosh

   I like the ability to use the Command key to turn a standard Emacs
   into a more Macintosh-specific application. (See [[http://stackoverflow.com/questions/162896/emacs-on-mac-os-x-leopard-key-bindings][these online notes]])

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    ; (require 'redo+)
    (require 'mac-key-mode)
    (mac-key-mode 1)
  
    (define-key mac-key-mode-map [(alt +)] 'text-scale-increase)
    (define-key mac-key-mode-map [(alt _)] 'text-scale-decrease)
    (define-key mac-key-mode-map [(alt l)] 'goto-line))  
#+END_SRC

** More Key Definitions

   I like the ability to move the current line up or down by just
   doing =S-M-up= and =S-M-down= (just like in Eclipse):

#+BEGIN_SRC emacs-lisp
  (load-library "line-move")
#+END_SRC

** Miscellaneous Settings

*** IDO (Interactively DO Things)

    According to [[http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/][Mickey]], IDO is the greatest thing.

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

    I guess you can call =ido-use-url-at-point= with Markdown to jump
    to the URLs. Perhaps?

*** SMEX

    Built using [[*IDO%20(Interactively%20DO%20Things)][IDO]].

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'smex)
  (smex-initialize) ; Can be omitted. This might cause a (minimal) delay

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)

  ;; This is our old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** Backup Settings

    This setting moves all backup files to a central location.
    Got it from [[http://whattheemacsd.com/init.el-02.html][this page]].

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))
#+END_SRC

   Make backups of files, even when they're in version control

#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
#+END_SRC

*** Line Numbers

    Let's create keystrokes to turn on/off line numbering:

#+BEGIN_SRC emacs-lisp
  (define-key mac-key-mode-map [(alt k)] 'nlinum-mode)
#+END_SRC

    Do we want this to turn on automatically with certain modes?

*** Smart Scan

    Use the =M-n= to search the buffer for the word the cursor is
    currently pointing. =M-p= to go backwards.

#+BEGIN_SRC emacs-lisp
  (load-library "smart-scan")
#+END_SRC
* Org Mode

  The [[http://orgmode.org][Org Mode]] feature was a big reason in my recent re-kindling of my
  Emacs love affair.

** Initial Variables

   On a semi-regular basis, we store some *important* files as
   variables that can be referenced elsewhere.

*** Org-Mode Sprint Note Files

    At the beginning of each sprint, we need to set this to the new
    sprint file.

#+BEGIN_SRC emacs-lisp
  (setq current-sprint "2013-04")
  
  (defun get-current-sprint-file ()
    (expand-file-name (concat "~/Dropbox/org/gilt/Sprint-" current-sprint ".org")))
  (defvar current-sprint-file 
    (get-current-sprint-file)
    "The name of an Org mode that stores information about the current sprint.")
  
  ;; Changed the name of the sprint? Run:   (create-sprint-file)
#+END_SRC

    When we change to a new sprint, we need to create a new Sprint
    Org File (from a template).

#+BEGIN_SRC emacs-lisp
  (defun create-sprint-file ()
    "Creates a new Sprint file"
    (interactive)
    (let (today (format-time-string "%Y-%m-%d %a"))
      (setq template (concat "#+TITLE:  Sprint " current-sprint "\n"
                    "#+AUTHOR: Howard Abrams\n"
                    "#+EMAIL:  habrams@gilt.com\n"
                    "#+DATE:   " today "\n\n"
                    "* My Work Issues\n\n"
                    "* Sprint Retrospective\n\n"))
      (with-temp-file current-sprint-file
        (insert template)
        (message (concat "Created " current-sprint-file)))))
#+END_SRC

*** Org-Mode Colors

  Before we load =org-mode= proper, we need to set the following
  syntax high-lighting parameters. These are used to help bring out
  the source code during literate programming mode.

  This information came from [[http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html][these instructions]], however, they tend
  to conflict with the /color-theme/, so we'll turn them off for now.

#+BEGIN_SRC emacs-lisp
  (defface org-block-begin-line
    '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the begin of source blocks.")
  
  (defface org-block-background
    '((t (:background "#FFFFEA")))
    "Face used for the source block background.")
  
  (defface org-block-end-line
    '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
    "Face used for the line delimiting the end of source blocks.")
#+END_SRC

** Library Loading

   The standard package manager (and most recent versions of Emacs)
   include =org-mode=, however, I want the latest version that has
   specific features for literate programming.

   Org-mode is installed in the global directory.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/org/lisp")
  (require 'org)
  ; (require 'org-install)
  (require 'ob-tangle)
#+END_SRC

** Global Key Bindings for Org-Mode

   The =org-mode= has some useful keybindings that are helpful no
   matter what mode you are using currently.

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Speed Keys

   If point is at the beginning of a headline or code block in
   org-mode, single keys do fun things. See =org-speed-command-help=
   for details (or hit the ? key at a headline).

#+BEGIN_SRC emacs-lisp
  (setq org-use-speed-commands t)
#+END_SRC

** Specify the Org Directories

   I keep all my =org-mode= files in a few directories, and I would
   like them automatically searched when I generate agendas.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/personal" 
                         "~/Dropbox/org/gilt" 
                         "~/Dropbox/org/lg" 
                         "~/Dropbox/org/rpg" 
                         "~/Dropbox/org/project"))
#+END_SRC

** Auto Note Capturing

   Let's say you were in the middle of something, but would like to
   /take a quick note/, but without affecting the file you are
   working on. This is called a "capture", and is bound to the
   following key:

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC

   This will bring up a list of /note capturing templates/:

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Thought or Note" plain (file "~/Dropbox/org/notes/GTD Thoughts.txt")
           "  * %i%?\n    %a")
          ("d" "General TODO Tasks" entry (file "~/Dropbox/org/notes/GTD Tasks.org")
           "* TODO %?\n  %i\n  %a" :empty-lines 1)
          ("g" "Interesting Gilt Link" entry (file+headline "~/Dropbox/org/gilt/General.org" "Links")
           "* %i%? :gilt:\n  Captured: %t\n  Linked: %a" :empty-lines 1)
          ("w" "Work Task" entry (file+headline "~/Dropbox/org/gilt/General.org" "Tasks")
           "* TODO %?%i :gilt:" :empty-lines 1)
          ("r" "Retrospective Note" entry (file+headline current-sprint-file "Sprint Retrospective")
           "* (Good/Bad) %i%? :gilt:\n  Sprint: %t\n  Linked: %a" :empty-lines 1)
          ("j" "Journal" entry (file+datetree "~/Dropbox/org/Journal Events.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
  
  ;; General notes go into this file:
  (setq org-default-notes-file "~/Dropbox/org/notes/GTD Tasks.org")
#+END_SRC

   After you have selected the template, you type in your note and hit
   =C-c C-c= to store it in the file listed above.

   Just remember, at some point to hit =C-c C-w= to /refile/ that note
   in the appropriate place.

*** RSS Feeds to Notes

    A cool feature allows me to automatically take the tasks assigned
    to me during a Sprint, and create entries for me to add my
    personal notes and comments.

#+BEGIN_SRC emacs-lisp
  (setq org-feed-alist
        (list (list "Gilt Jira"
          "https://jira.gilt.com/sr/jira.issueviews:searchrequest-xml/15717/SearchRequest-15717.xml"
          (get-current-sprint-file) "My Work Issues")))
  (setq org-feed-default-template "** %h\n   %a")
  ;; We really want to change the %h to %( replace ... \"%h\" and \"%a\" )
  ;; %(concat \"[[\%a][\" (substring \"%h\" 1) \"]\")
#+END_SRC

    To regen the list, hit: =C-c C-x g=

** Checking Things Off

   When I check off an item as done, sometimes I want to add some
   details about the completion (this is really only helpful when I'm
   consulting). 

   With this setting, each time you turn an entry from a TODO state
   into the DONE state, a line ‘CLOSED: [timestamp]’ will be inserted
   just after the headline. If you turn the entry back into a TODO
   item through further state cycling, that line will be removed
   again.

#+BEGIN_SRC emacs-lisp
  ; (setq org-log-done 'time)
  (setq org-log-done 'note)
#+END_SRC

** Org Publishing

   The brilliance of =org-mode= is the ability to publish your notes
   as HTML files into a web server. See [[http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][these instructions]].

#+BEGIN_SRC emacs-lisp
  (require 'org-publish)
  
  (setq org-publish-project-alist  '(
    ("org-notes"
     :base-directory        "~/Dropbox/org/"
     :base-extension        "org"
     :publishing-directory  "~/Sites/"
     :recursive             t
     :publishing-function   org-publish-org-to-html
     :headline-levels       4             ; Just the default for this project.
     :auto-preamble         t
     :auto-sitemap          t             ; Generate sitemap.org automagically...
     :makeindex             t
     :section-numbers       nil
     :table-of-contents     nil
     :style "<link rel=\"stylesheet\" href=\"../css/styles.css\" type=\"text/css\"/><link rel=\"stylesheet\" href=\"css/styles.css\" type=\"text/css\"/> <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\" type=\"text/javascript\"></script> <link href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/themes/smoothness/jquery-ui.css\" type=\"text/css\" rel=\"Stylesheet\" />    <script src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js\" type=\"text/javascript\"></script> <script =\"text/jacascript\" src=\"js/script.js\"></script>"
     )
  
    ("org-static"
     :base-directory       "~/Dropbox/org/"
     :base-extension       "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
     :publishing-directory "~/Sites/"
     :recursive            t
     :publishing-function  org-publish-attachment
     )
  
    ("all" :components ("org-notes" "org-static"))))
#+END_SRC

   I really, really would like to affect the output of the
   exported/published HTML files to make them /prettier/.

#+BEGIN_SRC emacs-lisp
  (setq org-export-html-style "<link rel='stylesheet' href='http://www.howardism.org/styles/org-export-html-style.css' type='text/css'/>
  <script src='http://use.edgefonts.net/source-sans-pro.js'></script>
  <script src='http://use.edgefonts.net/source-code-pro.js'></script>")
#+END_SRC

*** Publishing as Presentation

    Out of all [[http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html][the ideas]] online, I prefer using [[http://meyerweb.com/eric/tools/s5/][S5]], and by loading
    [[https://github.com/eschulte/org-S5/blob/master/org-export-as-s5.el][this code]], we can issue =org-export-as-s5=:

#+BEGIN_SRC emacs-lisp
  (load-library "org-export-as-s5")
#+END_SRC

    And let's tie this to a keystroke to make it easier to use:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f9> p") 'org-export-as-s5)
#+END_SRC

*** Publish as Markdown

    Using the [[http://orgmode.org/worg/org-contrib/org-export-generic.php][org-export-generic]] feature, we can export to Markdown
    using =C-c C-e g M=:

#+BEGIN_SRC emacs-lisp
(require 'org-export-generic)
(org-set-generic-type
 "Markdown" 
 '(:file-suffix ".markdown"
   :key-binding ?M
   :title-format "%s\n"
   :title-suffix ?=
   :body-header-section-numbers t
   :body-header-section-number-format "%s) "
   :body-section-header-prefix	("\n## " "\n### " "\n#### " "\n##### " "\n###### ")
   :body-section-header-format	"%s"
   :body-section-header-suffix "\n\n"
   :todo-keywords-export t
   :body-line-format "  %s\n"
   :body-tags-export	t
   :body-tags-prefix	" <tags>"
   :body-tags-suffix	"</tags>\n"
   ;;:body-section-prefix	"<secprefix>\n"
   ;;:body-section-suffix	"</secsuffix>\n"
   :body-line-export-preformated	t
   :body-line-fixed-prefix	"<pre>\n"
   :body-line-fixed-suffix	"\n</pre>\n"
   :body-line-fixed-format	"%s\n"
   :body-list-prefix	"\n"
   :body-list-suffix	"\n"
   :body-list-format	"  * %s\n"
   ;;:body-number-list-prefix	"<ol>\n"
   ;;:body-number-list-suffix	"</ol>\n"
   ;;:body-number-list-format	"<li>%s</li>\n"
   ;;:body-number-list-leave-number	t
   :body-list-checkbox-todo	"[_] "
   :body-list-checkbox-todo-end	""
   :body-list-checkbox-done	"[X] "
   :body-list-checkbox-done-end ""
   :body-line-format	"%s"
   body-line-wrap	85
   :body-text-prefix	""
   :body-text-suffix	""
   ))
#+END_SRC

** The Tower of Babel

   The trick to literate programming is in the [[http://orgmode.org/worg/org-contrib/babel/intro.html][Babel project]], which
   allows org-mode to not only interpret source code blocks, but
   evaluate them and tangle them out to a file.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh         . t)
   (js         . t)
   (emacs-lisp . t)
   (scala      . t)
   (clojure    . t)
   (dot        . t)
   (css        . t)
   (plantuml   . t)))
#+END_SRC

   It seems to automatically recognize the language used in a source
   block, but if not, call =org-babel-lob-ingest= to add all the
   languages from the code block into the list that Babel supports.
   Keystroke: =C-c C-v i=.

*** Font Coloring in Code Blocks
    
    Normally, fontifying the individual code blocks makes it
    impossible to work with, so instead of turning it on at the global
    level for all blocks, I created a couple of keystrokes to
    selectively colorize one block at a time.

#+BEGIN_SRC emacs-lisp
  ; (setq org-src-fontify-natively t)
  
  (global-set-key (kbd "<f9> g") 'org-src-fontify-buffer)
  (global-set-key (kbd "<f9> f") 'org-src-fontify-block)
#+END_SRC
* Programming Languages
** Clojure

   Me like Clojure, and since it is a LISP, then Emacs likes it too.

#+BEGIN_SRC emacs-lisp
  (require 'clojure-mode)
#+END_SRC

   With the =elein= project installed, it allows us to do things
   like: =M-x elein-run-cmd koan run=

   The following makes [[https://github.com/weavejester/compojure/wiki][Compojure]] macro calls look better:

#+BEGIN_SRC emacs-lisp
  (define-clojure-indent
    (defroutes 'defun)
    (GET 2)
    (POST 2)
    (PUT 2)
    (DELETE 2)
    (HEAD 2)
    (ANY 2)
    (context 2))
#+END_SRC

   Really want to try out my new [[file:~/Dropbox/Clojure/clojuredocs-emacs/org/clojuredocs.org][ClojureDocs functions]]:

#+BEGIN_SRC emacs-lisp
  (load-library "clojuredocs")
#+END_SRC

*** Paredit

    One of the cooler features of Emacs is the [[http://emacswiki.org/emacs/ParEdit][ParEdit mode]] which
    keeps all parenthesis balanced in Lisp-oriented languages.
    See this [[http://www.emacswiki.org/emacs/PareditCheatsheet][cheatsheet]].

#+BEGIN_SRC emacs-lisp
  (autoload 'paredit-mode "paredit"
    "Minor mode for pseudo-structurally editing Lisp code." t)
#+END_SRC

    We need to associate specific language modes with ParEdit.
    We first create a helper function:

#+BEGIN_SRC emacs-lisp
  (defun turn-on-paredit () (paredit-mode 1))
#+END_SRC

    Then associate the following Lisp-based modes with ParEdit:

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook       'turn-on-paredit)
  (add-hook 'lisp-mode-hook             'turn-on-paredit)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-paredit)
  (add-hook 'scheme-mode-hook           'turn-on-paredit)
  (add-hook 'clojure-mode-hook          'turn-on-paredit)
#+END_SRC

    Without the helpful functions, we would have to do something like:

#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'clojure-mode-hook          (lambda () (paredit-mode +1)))
#+END_SRC

** Scala

   We need to load the [[https://github.com/haxney/scala-mode][scala mode]].
   We follow [[http://www.scala-lang.org/node/354][these instructions]] to hook it up with [[http://code.google.com/p/yasnippet/][Yasnippet]].

#+BEGIN_SRC emacs-lisp
  (require 'scala-mode)
  
  ;; Shouldn't this be done by default?
  (add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
  
  (add-hook 'scala-mode-hook
            '(lambda ()
               (yas/minor-mode-on)
               (scala-mode-feature-electric-mode)))
#+END_SRC

   We follow [[http://jawher.net/2011/01/17/scala-development-environment-emacs-sbt-ensime/][these instructions]] to set it up with [[https://github.com/aemoncannon/ensime][Ensime]].
   Ensime is not available as a package, so I had to download and
   install it, so we need to add it to the =load-path=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/ensime/elisp")
  (require 'ensime)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
#+END_SRC

** JavaScript

   JavaScript should have three parts:
   - Syntax highlight (already included)
   - Syntax verification (with flymake-jshint)
   - Interactive REPL

   Why yes, it seems that the JavaScript mode has a special
   indentation setting. Go below?

#+BEGIN_SRC emacs-lisp
  (setq js-basic-indent 2)

  (setq js2-basic-offset 2)
  (setq js2-cleanup-whitespace t)
  (setq js2-enter-indents-newline t)
  (setq js2-global-externs "jQuery $")
  (setq js2-indent-on-enter-key t)
  (setq js2-mode-indent-ignore-first-tab t)

  (autoload 'js2-mode "js2-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+END_SRC

   Change the word "function" to just an "f":

#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords
   'js2-mode `(("\\(function *\\)("
               (0 (progn (compose-region (match-beginning 1) (match-end 1) "ƒ")
                         nil)))))
#+END_SRC

   Place warning font around TODO and others:

#+BEGIN_SRC emacs-lisp
  (font-lock-add-keywords 'js2-mode
                          '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\):"
                             1 font-lock-warning-face t)))
#+END_SRC

*** FlyMake and JSHint

   While editing JavaScript is baked into Emacs, it is kinda cool to
   have it give you red sections based on [[http://www.jshint.com/][jshint]].
   This is done with [[http://www.emacswiki.org/emacs/FlymakeJavaScript][FlyMake]].

#+BEGIN_SRC emacs-lisp
  ;; Make sure that PATH can reference the 'jshint' executable:
  (setenv "PATH" (concat "/usr/local/bin:/opt/local/bin:" (getenv "PATH")))
  (setq exec-path '( "/usr/local/bin" "/usr/bin" "/opt/local/bin"))
  
  (require 'flymake-jshint)
  (add-hook 'js-mode-hook
            (lambda () (flymake-mode 1)))
#+END_SRC

   Now load and edit a JavaScript file, like [[file:~/jshint-code-test.js][jshint-code-test.js]].

*** JavaScript REPL

    We can use two different approaches for a JavaScript REPL.
    *Note:* Neither are working very effectively.

**** Client JS with MozRepl

     Assuming you have Mozilla Firefox running with the [[https://addons.mozilla.org/en-US/firefox/addon/mozrepl/][MozRepl]]
     add-on and you've installed a =moz= executable:

#+BEGIN_SRC emacs-lisp :tangle no
  (autoload 'moz-minor-mode "moz" "Mozilla Minor and Inferior Mozilla Modes" t)
  
  (add-hook 'js-mode-hook 'javascript-custom-setup)
  (defun javascript-custom-setup ()
    (moz-minor-mode 1))
#+END_SRC

     This gives you the following commands:

     - C-c C-s: open a MozRepl interaction buffer and switch to it
     - C-c C-l: save the current buffer and load it in MozRepl
     - C-M-x: send the current function (as recognized by c-mark-function) to MozRepl
     - C-c C-c: send the current function to MozRepl and switch to the interaction buffer
     - C-c C-r: send the current region to MozRepl

**** Server JS with Node.js

    We use [[http://js-comint-el.sourceforge.net][js-comint]], but hook it up with node.js:

#+BEGIN_SRC emacs-lisp
  (require 'js-comint)
  (setenv "NODE_NO_READLINE" "1")   ;; Turn off fancy node prompt
  ;; Use node as our repl
  (setq inferior-js-program-command "node")
#+END_SRC

    According to [[http://nodejs.org/api/all.html#all_repl][these instructions]], we set the =NODE_NO_READLINE=
    variable.

    Need some prompt configuration for the REPL:

#+BEGIN_SRC emacs-lisp
  (setq inferior-js-mode-hook
        (lambda ()
          ;; We like nice colors
          (ansi-color-for-comint-mode-on)
          ;; Deal with some prompt nonsense
          (add-to-list
           'comint-preoutput-filter-functions
           (lambda (output)
             (replace-regexp-in-string "\033\\[[0-9]+[GK]" "" output)
             (replace-regexp-in-string ".*1G.*3G" "&GT;" output)
             (replace-regexp-in-string "&GT;" "> " output)
  ))))
#+END_SRC

    Now, we can start up a JavaScript node REPL: =run-js=

    Let's test this out by loading this into a separate buffer (=C-c '=)
    and then doing a =M-x send-buffer-and-go=.

    Set up some helpful keyboard instructions:

#+BEGIN_SRC emacs-lisp
  (add-hook 'js2-mode-hook
          (lambda () 
            (local-set-key (kbd "C-x C-e") #'js-send-buffer-and-go)
            (local-set-key (kbd "C-x r")   #'run-js)))
#+END_SRC

    Wanna try it all out?

#+BEGIN_SRC js2 :tangle no
  function factorial(n) { 
    return n == 0 ? 1 : n * factorial(n - 1);
  }
  factorial(16);
#+END_SRC

** Java
*** JSP

    Dealing with [[http://www.emacswiki.org/emacs/JspMode][JSP files]] is bad. But we'll try the [[http://www.crossleys.org/~jim/work/jsp.el][jsp-mode]] first:

#+BEGIN_SRC emacs-lisp
    ; (autoload 'jsp-mode "jsp" "JSP" t)

    ; Tell emacs to use jsp-mode for .jsp files
    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . html-mode))
#+END_SRC

* Tools
** Git

   Git is [[http://emacswiki.org/emacs/Git][already part of Emacs]]. However, [[http://philjackson.github.com/magit/magit.html][Magit]] is sweet.
   
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'magit)
  (define-key global-map "\M-\C-g" 'magit-status)
#+END_SRC

** Auto Complete

   This feature scans the code and suggests completions for what you
   are typing. Useful at times ... annoying at others.

#+BEGIN_SRC emacs-lisp
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
#+END_SRC

   Note that we specify where a dictionary lives for each specific
   language.

** Yas Snippet

   The [[http://code.google.com/p/yasnippet/][yasnippet project]] allows me to create snippets of code that
   can be brought into a file, based on the language. 

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas/global-mode 1)
; (yas/initialize)
#+END_SRC

   We just have different directories for each:

#+BEGIN_SRC emacs-lisp
(setq yas/snippet-dirs
      '("~/.emacs.d/snippets"            ;; personal snippets
        "~/.emacs.d/yasnippet/extras/imported"
        "~/Dropbox/emacs.d/snippets/javascript-mode"
        "~/Dropbox/emacs.d/snippets/clojure-mode"
        "~/Dropbox/emacs.d/snippets/org-mode"
        "~/Dropbox/emacs.d/snippets/emacs-list-mode"
        "~/.emacs.d/scala-emacs/contrib/yasnippet/snippets"))

; (mapc 'yas/load-directory yas-snippet-dirs)
#+END_SRC

** Markdown

   Don't use Markdown nearly as much as I used to, but I'm surprised
   that the following extension-associations aren't the default:

#+BEGIN_SRC emacs-lisp
  (autoload 'markdown-mode "markdown-mode.el"
     "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
#+END_SRC   

** Note Grep

   I use the standard [[http://emacswiki.org/emacs/GrepMode#toc1][grep package]] in Emacs and wrap it so that I
   can easily search through my notes.

#+BEGIN_SRC emacs-lisp
  (defun ngrep (reg-exp)
    "Searches the Notes and ORG directory tree for an expression."
    (interactive "sSearch note directory for: ")
    (let ((file-ext "*.org *.md *.txt *.markdown")
          (search-dir "~/Dropbox/org"))
      (message "Searching in %s" search-dir)
      (grep-compute-defaults)
      (rgrep reg-exp file-ext search-dir)))
  
  (define-key global-map "\C-x\C-n" 'ngrep)
  (define-key global-map "\C-x\C-r" 'rgrep)
#+END_SRC

   Don't forget that after doing a =C-x C-f= to find a file, you can
   hit another =M-f= to do a find the given directory (and subs).

   Also, you can do a full locate with =C-x C-l=:

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-x\C-l" 'locate)
  (setq locate-command "mdfind")  ;; Use Mac OS X's Spotlight
#+END_SRC

** Spell Checking


   I like spell checking with [[http://www.emacswiki.org/emacs/FlySpell][FlySpell]], which uses =ispell=.

   To build a dictionary hash (seems important now), do this:

#+BEGIN_SRC sh :tangle no
  buildhash ~/Dropbox/dictionary-personal.txt /opt/local/lib/english.aff ~/Dropbox/dictionary-personal.txt.hash
#+END_SRC

   Then, we can use it like:

#+BEGIN_SRC emacs-lisp
  (setq ispell-personal-dictionary 
      (concat (getenv "HOME") "/Dropbox/dictionary-personal.txt"))

  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

   If I find any =text-mode= derived mode that I don't want to
   spell-check, then I need to use the following:

#+BEGIN_SRC emacs-lisp :tangle no
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook org-agenda-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC

** Closing Windows

   I would like Command-W to close a frame, but only if it only has a
   single window in it. I found this code on [[http://www.emacswiki.org/emacs/frame-cmds.el][this site]].\

#+BEGIN_SRC emacs-lisp
  (defun delete-single-window (&optional window)
    "Remove WINDOW from the display.  Default is `selected-window'.
  If WINDOW is the only one in its frame, then `delete-frame' too."
    (interactive)
    (save-current-buffer
      (setq window (or window (selected-window)))
      (select-window window)
      (kill-buffer)
      (if (one-window-p t) 
          (delete-frame) 
          (delete-window (selected-window)))))
  
  (define-key mac-key-mode-map [(alt w)] 'delete-single-window)
#+END_SRC

** Mail with Gnus

   I would like to hook up my [[http://www.emacswiki.org/emacs/GnusGmail][Gmail with GNUS mail reader]].
   See these [[http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html][detailed instructions]] if we run into problems.
   The instructions are contained in [[file:gnus.org][gnus.org]] file.

#+BEGIN_SRC emacs-lisp
  (load-library "gnus-config")
#+END_SRC

** Reading Mail?

   Well, Gnus is pretty gunky. It works, but ...

#+BEGIN_SRC emacs-lisp :tangle no
(autoload 'vm "~/vm" "Start VM on your primary inbox." t)
(autoload 'vm-visit-folder "~/vm" "Start VM on an arbitrary folder." t)
(autoload 'vm-mail "~/vm" "Send a mail message using VM." t)
(autoload 'vm-submit-bug-report "~/vm" "Send a bug report about VM." t)
#+END_SRC


