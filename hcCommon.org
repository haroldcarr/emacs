#+TITLE:       =.emacs=
#+AUTHOR:      Harold Carr
#+DESCRIPTION: literate version of my .emacs file.
#+PROPERTY:    results silent
#+PROPERTY:    tangle hcCommon.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:t todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

Harold Carr's =.emacs= file, written using [[http://www.orgmode.org][org-mode]].

- [[http://www.gnu.org/software/emacs/manual/index.html]]
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html]]
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File]]
- [[http://emacswiki.org/]]

#+BEGIN_COMMENT
-  Before you can build this on a new system, make sure that you put
   the cursor over any of the above properties, and hit: =C-c C-c=

- =tab= opens/close a particular section
- Shift =tab= cycles between the outline and full text
- Tangle it with:  =C-c C-v t=
  - Creates:  =hcCommon.el= in this directory (overwrites previous)
#+END_COMMENT

------------------------------------------------------------------------------
* Intro

#+NAME: Note
#+BEGIN_SRC emacs-lisp :comments off
;;; | ====================================================== |
;;; | DO NOT EDIT the generated *.el file.                   |
;;; | It was generated from an org-mode "literate" version.  |
;;; | ====================================================== |

;;;;
;;;; Created       : a long time ago ...        by Harold Carr.
;;;; Last Modified : 2015 Oct 10 (Sat) 11:17:33 by Harold Carr.
;;;;
#+END_SRC

------------------------------------------------------------------------------
* Sections

Name each "section" in this .emacs file.

Then, when an error occurs, you can tell what section it occurs in
by looking in the =*Messages*= buffer or examining the =*hcSection*= variable.

=debug-on-error= is finer grained, but this is still useful.

#+NAME: hcsection
#+BEGIN_SRC emacs-lisp :comments off
(defvar *hcSectionEnabled* t)
(defvar *hcSection* "")

(defun hcSection (title)
  "For debugging .emacs"
  (cond (*hcSectionEnabled*
         (setq *hcSection* title)
         (message title))))

(setq debug-on-error nil)

(defmacro comment (&rest x) nil)

;; see: https://github.com/jwiegley/use-package
(defmacro hcRequire (name &rest body)
  `(if (require ',name nil t)
       (progn ,@body)
     (warn (concat (format "%s" ',name) " NOT FOUND"))))
#+END_SRC

------------------------------------------------------------------------------
* Beans

Never access a variable directly.

#+NAME: beans
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Beans")

(defmacro hcDefineBean (name &rest body)
  (let ((var-name (intern (concat "*" (format "%s" name) "*"))))
    `(progn
       (defvar ,var-name ,@body)
       (defun ,name () ,var-name))))
#+END_SRC

------------------------------------------------------------------------------
* Predicates

#+NAME: predicates
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Predicates")

(defun hcIsVersionP    (x)(string-match x (emacs-version)))
(defun hcUnameContains (x)(string-match x (shell-command-to-string "uname -a")))


(defun hcLucidP        () (hcIsVersionP "Lucid"))
(defun hcXEmacsP       () (hcIsVersionP "XEmacs"))
(defun hcXP            () (equal window-system 'x))
(defun hcOracleLinuxP  () (or (and (hcIsVersionP "redhat-linux")
                                   (hcIsVersionP "us.oracle.com"))
                              (and (hcIsVersionP "x86_64-unknown-linux-gnu")
                                   (hcIsVersionP "2013-03-26 on adc2100420"))
                              (and (hcUnameContains "Linux")
                                   (or (hcUnameContains "slcn19cn15ib")
                                       (hcUnameContains "slcn19cn16ib")
                                       (hcUnameContains "adc00phv")))))
(defun hcWin32P        () (or (equal window-system 'win32)
			      (equal window-system 'w32)
			      (equal window-system 'mswindows)
                              (hcIsVersionP "cygwin")))
(defun hcDarwinP       () (hcIsVersionP "darwin"))
#+END_SRC

------------------------------------------------------------------------------
* Key Bindings

- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html#Key-Bindings]]
- [[http://www.emacswiki.org/emacs/KeyBindingDiscussion]]

#+NAME: keybindings
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Key Bindings")

;; NOTE: set-mark-command is \C-space
;; the following swaps the default kill/copy
(global-set-key "\M-w" 'kill-region)
(global-set-key "\C-w" 'kill-ring-save)

; C-x 5 o other-frame "frame.el"
; C-x o other-window "window.el"
(global-set-key "\C-x\C-o" 'other-frame) ; overwrites: delete-blank-lines "simple.el"
(global-set-key "\M-g" 'goto-line)

(autoload 'dabbrev "dabbrev" "dabbrev" t)
(if (not (hcWin32P))
  (global-set-key "\M-\ " 'dabbrev-expand)
  (global-set-key "\C-z"  'dabbrev-expand)) ; when all else fails
#+END_SRC

------------------------------------------------------------------------------
* Executing shell commands

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Shell Commands")

(defun hcShExecCmd (name &rest args)
  (shell-command-to-string
   (concat (if (symbolp name) (symbol-name name) name)
           " "
	   (apply #'concat
		  (mapcar #'(lambda (arg) (format "%s " arg))
			  args)))))

(defmacro hcShDefCmd (name args)
  `(defun ,name ,args
     (apply #'hcShExecCmd (list ',name ,@args))))

(defmacro hcShDefCmdMemo (name)
  (let ((varName (intern (format "*%s*" name))))
    `(progn
       (defvar ,varName nil)
       (defun ,name ()
	 (cond (,varName)
	       (t (setq ,varName (hcShExecCmd ',name))))))))
#+END_SRC

------------------------------------------------------------------------------
* Locations

Important (to me) directories.

#+NAME: locations
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Locations")

(defun hcExpandFileName (forExternalProgramP path)
  (if (hcWin32P)
      (let ((result (shell-command-to-string (concat "cygpath " (if forExternalProgramP "-m " "-u " path)))))
        ;; Get rid of extra linefeed put in by shell-command-to-string.
        (substring result 0 (- (length result) 1)))
    (expand-file-name path)))

(defun hcLocation (name) (hcShExecCmd 'hcLocation name))

(hcDefineBean hcEmacsDir     (hcLocation 'emacs))
(add-to-list 'load-path      (hcEmacsDir))

(hcDefineBean hcEsync        (hcLocation  'esync))
(hcDefineBean hcFinance      (hcLocation  'finance))
(hcDefineBean hcFsync        (hcLocation  'fsync))
(hcDefineBean hcFtptmp       (hcLocation  'ftptmp))
(hcDefineBean hcHome         (hcLocation  'home))
(hcDefineBean hcM2Repository (hcShExecCmd 'hcM2Repository))
(hcDefineBean hcRpt          (hcLocation  'rpt))
(hcDefineBean hcSync         (hcLocation  'sync))
(hcDefineBean hcUlhcd        (hcLocation  'ulhcd))
(hcDefineBean hcWs           (hcLocation  'ws))

(hcShDefCmdMemo hcPathSep)
(hcShDefCmd     hcLibClasspath ())
(hcShDefCmd     hcFsToBs (string))
(hcShDefCmd     hcLlavaMainClass ())
#+END_SRC

------------------------------------------------------------------------------
* Top level misc

#+NAME: toplevelmisc
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Top level misc stuff")

;; Ask before exit.
(setq confirm-kill-emacs
      (lambda (e)
        (y-or-n-p-with-timeout
         "Really exit Emacs (automatically exits in 5 secs)? " 5 t)))

;; don't ask when killing shell buffer (and other processes)
(setq kill-buffer-query-functions
      (remq 'process-kill-buffer-query-function
            kill-buffer-query-functions))

;; Do NOT use tabs for indenting
(setq-default indent-tabs-mode nil)

;; Why have extra do-nothing whitespace?
(setq-default show-trailing-whitespace     t)
(setq         default-indicate-empty-lines t)

;; highlight text beyond nth column
(use-package whitespace
  :config
  (setq whitespace-style '(face lines-tail))
  (setq whitespace-line-column 100)
  (global-whitespace-mode t))
#+END_SRC

** Display full filepath in title

- [[http://emacsredux.com/blog/2013/04/07/display-visited-files-path-in-the-frame-title/]]

#+BEGIN_SRC emacs-lisp :comments off
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+END_SRC

------------------------------------------------------------------------------
* Registers and Bookmarks

- Registers
  - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html#Registers]]
  - [[http://emacswiki.org/emacs/Registers]]
- Bookmarks (like registers, but persistent)
  - [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html#Bookmarks]]
  - [[http://emacswiki.org/emacs/BookMarks]]

TODO
- [[http://www.emacswiki.org/emacs-en/BookmarkPlus]]

#+NAME: bookmarks
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Bookmarks")

(setq bookmark-save-flag 1)
(setq bookmark-default-file (concat (hcEmacsDir) "/.emacs.bmk"))
#+END_SRC

------------------------------------------------------------------------------
* Timestamp

- [[ftp://202.5.194.21/SW_ebooks/EMAGAZINE/Writing_GNU_Emacs_Extensions.pdf]]
  - starting on page 47

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Timestamp")

; when running on samsun nc10; cygwin; startxwin; emacs; this is defined with
; the computer name and my name and it screws up - so eval this by hand
; TODO : it doesn't get redefined below because hcWin32P is false
; because the window-system is x
;(defun user-full-name () "Harold Carr")
(use-package hcTimestamp)
#+END_SRC

------------------------------------------------------------------------------
* org-mode

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "OrgMode")

(use-package org
  :defer t
  :config
  (progn (use-package hcInitOrgMode)
         (hcOrgMode)))
#+END_SRC

------------------------------------------------------------------------------
* Tags

- http://www.emacswiki.org/emacs/BuildTags
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Tags.html#Tags]]
- [[http://emacswiki.org/emacs/EmacsTags]]

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Tags")

; alternate way to create using etags
; cd <...>
; need a regex instead of "*" - also only files
; find . -name "*" -print -o -name SCCS -name RCS -prune | .../bin/etags -

(defun hcTagsCreate (dir-name &optional tags-dir-path-filename)
  "Create tags file."
  (interactive "DDirectory: ")
  ;; ctags via nix
  (let* ((dir (directory-file-name dir-name))
         (ctags-filename (if (null tags-dir-path-filename) (concat dir "/TAGS") tags-dir-path-filename)))
    (shell-command
     (format "ctags -f %s -e -R %s" ctags-filename dir))))

(defun        hcTagsDir       (x)    (concat (hcEsync)        "/TAGS/" x))
(hcDefineBean hcTagsCatalogSrc       (concat (hcWs)           "/catalog-service/src/"))
(hcDefineBean hcTagsCatalogDst       (hcTagsDir               "TAGS-CATALOG"))
(hcDefineBean hcTagsJavaSrc          "/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/src")
(hcDefineBean hcTagsJavaDst          (hcTagsDir               "TAGS-JAVA"))
(hcDefineBean hcTagsBuzzSrc          (concat (hcWs)           "/buzz-message-bus/src"))
(hcDefineBean hcTagsBuzzDst          (hcTagsDir               "TAGS-BUZZ"))
(hcDefineBean hcTagsMessageBusSrc    (concat (hcM2Repository) "/com/oracle/commons/fmw-commons/12.1.4-0-0-SNAPSHOT/sources/src"))
(hcDefineBean hcTagsMessageBusDst    (hcTagsDir               "TAGS-MESSAGE-BUS"))
(defun hcTagsCreateCatalog    () (interactive) (hcTagsCreate (hcTagsCatalogSrc)    (hcTagsCatalogDst)))
(defun hcTagsCreateJava       () (interactive) (hcTagsCreate (hcTagsJavaSrc)       (hcTagsJavaDst)))
(defun hcTagsCreateBuzz       () (interactive) (hcTagsCreate (hcTagsBuzzSrc)       (hcTagsBuzzDst)))
(defun hcTagsCreateMessageBus () (interactive) (hcTagsCreate (hcTagsMessageBusSrc) (hcTagsMessageBusDst)))
(defun hcTagsCreateAll ()
  (interactive)
  (hcTagsCreateCatalog)
  (hcTagsCreateJava)
  (hcTagsCreateBuzz)
  (hcTagsCreateMessageBus))
(defun hcVtc () (interactive) (visit-tags-table (hcTagsCatalogDst)))
(defun hcVtj () (interactive) (visit-tags-table (hcTagsJavaDst)))
(defun hcVtb () (interactive) (visit-tags-table (hcTagsBuzzDst)))
(defun hcVtm () (interactive) (visit-tags-table (hcTagsMessageBusDst)))
#+END_SRC

------------------------------------------------------------------------------
* Version Control and Magit

Version Control
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Version-Control.html#Version-Control]]
- [[http://emacswiki.org/emacs/VersionControl]]
GIT
- [[http://magit.github.com/magit/magit.html]]
- [[http://www.emacswiki.org/emacs/Magit]]
- [[https://github.com/pidu/git-timemachine]]
Magit and Ediff
- [[http://dachary.org/?p=2893]]

#+NAME: magit
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Version Control and Magit")

(hcSection "git")
(if (not (fboundp 'spacemacs-mode))
    (use-package magit))
#+END_SRC

------------------------------------------------------------------------------
* Send diagram text to SDEDIT (UML sequence diagrams)

- [[http://sdedit.sourceforge.net/]]

When the current buffer contains SDEDIT diagram text, just do
- =M-x sdedit=

Be sure the sdedit program is up and running as a service.

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "SDEDIT")

(defun hcSdedit ()
  (interactive)
  (let ((p (open-network-stream "*HC-SDEDIT*" "*HC-SDEDIT-CONNECTION*" "localhost" "60001")))
    (process-send-string p (concat (buffer-name) "
" (buffer-string)))
    (delete-process p)))
#+END_SRC

------------------------------------------------------------------------------
* END

#+NAME: EOF
#+BEGIN_SRC emacs-lisp :comments off
(provide 'hcCommon)

;;; End of file.
#+END_SRC

# End of file.
