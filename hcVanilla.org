#+TITLE:       =.emacs=
#+AUTHOR:      Harold Carr
#+DESCRIPTION: literate version of my .emacs file.
#+PROPERTY:    results silent
#+PROPERTY:    tangle hcVanilla.el
#+PROPERTY:    eval no-export
#+PROPERTY:    comments org
#+OPTIONS:     num:nil toc:t todo:nil tasks:nil tags:nil
#+OPTIONS:     skip:nil author:nil email:nil creator:nil timestamp:nil
#+INFOJS_OPT:  view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js

------------------------------------------------------------------------------
* Top level misc

#+NAME: toplevelmisc
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Top level misc stuff")

;; rather than highlight or off
(setq blink-matching-paren (quote jump))

;; Get rid of useless stuff.
(dolist (mode '(tool-bar-mode)) ;; menu-bar-mode scroll-bar-mode
  (when (fboundp mode) (funcall mode -1)))

;; I have already seen it.
(setq inhibit-startup-screen t)

;; Do not want to destroy symbolic links.
(setq backup-by-copying-when-linked t)

;; Enable ESC : to evaluate emacs Lisp commands.
(put 'eval-expression 'disabled nil)
#+END_SRC

** Mode line

- [[http://www.emacswiki.org/emacs/DisplayTime]]

#+BEGIN_SRC emacs-lisp :comments off
(load "time")
(display-time)

(line-number-mode)
(column-number-mode)
#+END_SRC

** Make buffer names unique

Use part of the path name for buffer name when visiting two different files with same name.

- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html#Uniquify]]
- [[http://emacswiki.org/emacs/uniquify]]

#+BEGIN_SRC emacs-lisp :comments off
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward)
  (setq uniquify-separator ":"))
#+END_SRC

** Incremental/Interactively switching buffers or finding files

- [[http://emacswiki.org/emacs/InteractivelyDoThings]]

Note:
- =C-x C-f= "interactively" finds a file
- =C-x C-f C-f= uses the old find-file

I used to use =iswitchb-mode= for switching buffers, but find =ido-mode= to be better.

- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Iswitchb.html#Iswitchb]]
- [[http://www.emacswiki.org/emacs/IswitchBuffers]]

#+BEGIN_SRC emacs-lisp :comments off
(use-package ido
  :config
  (ido-mode t)
  (setq ido-enable-flex-matching t))

;; fall back if necessary
(if (not (fboundp 'ido-mode))
  (use-package iswitchb
    :config
    (iswitchb-mode t)))
#+END_SRC

TODO
- [[http://www.emacswiki.org/emacs-en/kill-ring-ido.el]]

** Recently visited files

TODO
- [[http://emacsredux.com/blog/2013/04/05/recently-visited-files/]]

------------------------------------------------------------------------------
* daemon / emacsclient

#+NAME: shell
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "daemon / emacsclient")
#+END_SRC

See (I could not get C-c e to work in IntelliJ)
- [[http://spin.atomicobject.com/2014/08/07/intellij-emacs/]]

#+BEGIN_EXAMPLE
# manual start
./bin-hosted/emacs --daemon
# manual use
./bin-hosted/emacsclient -c <any file/dir name>
# manual kill
# - from within emacs
M-x kill-emacs
or
M-x save-buffers-kill-emacs
# from outside of emacs
emacsclient -e '(kill-emacs)'
or
emacsclient -e '(client-save-kill-emacs)'
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp :comments off
(if (functionp 'window-system)
    (when (and (window-system)
           (>= emacs-major-version 24))
      (server-start)))
#+END_SRC

------------------------------------------------------------------------------
* Emacs Code Browser (ECB)

- [[http://www.emacswiki.org/emacs/EmacsCodeBrowser]]

- Go to directories : "C-c . g d" ;; window 0
- Go to sources     : "C-c . g s" ;; window 1
- Go to methods     : "C-c . g m" ;; window 2
- Go to history     : "C-c . g h" ;; window 3
- Main buffer       : "C-c . g 1"

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "ECB")

(use-package ecb
  :defer t
  :config
  (setq ecb-options-version "2.40")
  (setq ecb-source-path     '(("/" "/")))
  (setq ecb-tip-of-the-day  nil)
  (setq ecb-windows-width   0.15)
  (setq ecb-layout-name     "left9") ;; only the methods window
)
#+END_SRC

------------------------------------------------------------------------------
* Compilation

- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Building.html#Building]]
  - see Compilation, Compilation Mode and Compilation Shell
- [[http://emacswiki.org/emacs/CompilationMode]]

For extending it to work with Maven:

- [[http://praveen.kumar.in/2011/03/09/making-gnu-emacs-detect-custom-error-messages-a-maven-example/]]

#+NAME: compilation
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Compilation")

(use-package compile
  :defer t
  :config
  (add-to-list 'compilation-error-regexp-alist 'maven)
  (add-to-list 'compilation-error-regexp-alist-alist
               '(maven "\\[ERROR\\] \\(.+?\\):\\[\\([0-9]+\\),\\([0-9]+\\)\\].*"
                       1 2 3)))
#+END_SRC

------------------------------------------------------------------------------
* Calendar and Diary

- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Calendar_002fDiary.html#Calendar_002fDiary]]
- [[http://emacswiki.org/emacs/CalendarMode]]

#+NAME: calendar
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Calendar and Diary")

(defun hcCalendar ()
  (setq diary-file (concat (hcFsync) "/.emacs.diary"))
  ;(setq calendar-week-start-day 1) ; monday
  (setq calendar-offset -1)
  (setq view-diary-entries-initially t)
  (setq number-of-diary-entries 2)
  ;; This causes a debug error in emacs 24
  ;(setq mark-diary-entries-in-calendar t)
  ;; This causes fancy not to be displayed
  ;;(setq view-calendar-holidays-initially t)
  ;;(setq holidays-in-diary-buffer nil)
  (setq calendar-latitude  40.785188)
  (setq calendar-longitude -111.863011)

  (add-hook 'diary-display-hook 'fancy-diary-display)
  (setq diary-list-include-blanks t)
  ;; not working: (add-hook 'list-diary-entries-hook 'sort-diary-entries t)
  ;; Make sure starting calendar comes after auto-resizing of frame.
  (if (hcLucidP)
      (defun diary-remind (form number)
	(eval form)))
  ;; Do not automatically show calendar on startup
  ;(if (file-exists-p diary-file)
  ;    (calendar))
  ;; Customize appt.el
  ;;(use-package appt :defer t)
  (cond (nil
	 ;; This seems to cause emacs to crash on nt
	 ;; and does not exist in xemacs
	 (setq appt-message-warning-time 15) ;; minutes
	 (setq appt-display-duration 60) ;; seconds
	 (add-hook 'diary-hook 'appt-make-list)
	 (let ((diary-display-hook 'ignore))
	   (diary)))))

(use-package calendar :defer t :config (hcCalendar))
#+END_SRC

** Calendar Framework

- [[https://github.com/kiwanami/emacs-calfw]]

#+NAME: calendar
#+BEGIN_SRC emacs-lisp :comments off
;; M-x cfw:open-diary-calendar
(use-package calfw-cal :defer t)
#+END_SRC

------------------------------------------------------------------------------
* Line Numbers

- [[http://www.emacswiki.org/LineNumbers]]

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Line Numbers")

(use-package linum :defer t
;;  :config (setq global-linum-mode t) ;; always on
)
#+END_SRC

------------------------------------------------------------------------------
# <<HASKELL>>
* Haskell

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Haskell")

(use-package hcHaskell)
#+END_SRC

------------------------------------------------------------------------------
* Images

- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Image_002dDired.html]]

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Images")

(setq image-dired-dir "/tmp/emacs-image-dired/")
#+END_SRC

------------------------------------------------------------------------------
* Align

- [[https://gist.github.com/700416]]
- [[http://stackoverflow.com/questions/3633120/emacs-hotkey-to-align-equal-signs]]
- uses [[http://www.emacswiki.org/emacs/rx]]

#+NAME: calendar
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Align")

(defmacro hcMakeAlignCmd (name char)
  `(defun ,name (begin end)
     ,(concat "Align region to " char " signs")
     (interactive "r")
     (align-regexp begin end
                   (rx (group (zero-or-more (syntax whitespace))) ,char)
                   1 1)))

(hcMakeAlignCmd align-to-colon        ":")
(hcMakeAlignCmd align-to-equals       "=")
(hcMakeAlignCmd align-to-hash         "=>")
(hcMakeAlignCmd align-to-comma-before ",")

(defun align-to-comma-after (begin end)
  "Align region to , signs"
  (interactive "r")
  (align-regexp begin end
                (rx "," (group (zero-or-more (syntax whitespace))) ) 1 1 ))
#+END_SRC

------------------------------------------------------------------------------
* Google Search

- [[http://emacsredux.com/blog/2013/03/28/google/]]

#+NAME: calendar
#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Google Search")

(defun hcGoogle ()
  "Google the selected region if any, display a query prompt otherwise."
  (interactive)
  (browse-url ;; results in default browser
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (url-hexify-string (if mark-active
                           (buffer-substring (region-beginning) (region-end))
                         (read-string "Google: "))))))
#+END_SRC

------------------------------------------------------------------------------
* Google Contacts

- [[http://julien.danjou.info/projects/emacs-packages#google-contacts]]

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Google Contacts")

;; uses oauth2 (in ELPA)

;; M-x google-contacts

;; key bindings:
;; n or p : go the next or previous record;
;; g      : refresh the result, bypassing the cache;
;; m      : send an e-mail to a contact;
;; s      : new search;
;; q      : quit.
(use-package google-contacts :defer t)

;; integrate directly Google Contacts into Gnus;
;; (use-package google-contacts-gnus :defer t)
;; Then use ; to go to contact info while reading an e-mail.

;; integrate directly Google Contacts into message-mode;
;; (use-package google-contacts-message :defer t)
;; Then use TAB to go to complete e-mail addresses in the header fields.
#+END_SRC

#+BEGIN_COMMENT
First time use:
- M-x google-contacts
- "Enter the code your browser displayed: "
- browser shows accounts.google.com/... saying
  google-oauth-el would like to manage your contacts
  CLICK: Accept
- Gives code.
- Cut/paste into above.
- "Passphrase for PLSTORE  plstore .../.emacs.d/oauth.plstore
- enter and store in password manager
#+END_COMMENT

------------------------------------------------------------------------------
* Google Maps

- [[http://julien.danjou.info/projects/emacs-packages#google-maps]]

#+BEGIN_COMMENT
M-x google-maps
- type a location.

key bindings:

+ or - to zoom in or out;
left, right, up, down to move;
z to set a zoom level via prefix;
q to quit;
m to add or remove markers;
c to center the map on a place;
C to remove centering;
t to change the maptype;
w to copy the URL of the map to the kill-ring;
h to show your home.

Integrate into Org-mode:

(require 'org-location-google-maps)

Then use C-c M-L to enter a location assisted by Google geocoding service.
Pressing C-c M-l will show you a map.

Advanced: look at google-maps-static-show and google-maps-geocode-request functions.

NOTE: home set via calendar-latitude/calendar-longitude
#+END_COMMENT

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Google Maps")
(use-package google-maps :defer t)
#+END_SRC

------------------------------------------------------------------------------
* Twitter

- [[http://www.emacswiki.org/emacs/TwitteringMode]]

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Twitter")
(use-package twittering-mode :defer t)
#+END_SRC

------------------------------------------------------------------------------
* Misc

#+BEGIN_SRC emacs-lisp :comments off
(hcSection "Misc")
(use-package httpcode :defer t)
#+END_SRC

------------------------------------------------------------------------------
* Features used but not customized

** Dired
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html#Dired]]
- [[http://emacswiki.org/emacs/DiredMode]]
** Dynamic Abbreviations
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Dynamic-Abbrevs.html#Dynamic-Abbrevs]]
- [[http://emacswiki.org/emacs/DynamicAbbreviations]]
** Speedbar
- [[http://www.gnu.org/software/emacs/manual/html_mono/speedbar.html]]
- [[http://emacswiki.org/emacs/SpeedBar]]
** Keyboard Macros
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros]]
- [[http://emacswiki.org/emacs/KeyboardMacros]]
** Document Viewing
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/Document-View.html#Document-View]]
- [[http://www.emacswiki.org/emacs/DocViewMode]]
** Color Themes and rainbow-mode
- [[http://emacsredux.com/blog/2013/08/21/color-themes-redux/]]
- [[http://julien.danjou.info/projects/emacs-packages#rainbow-mode]]
** DIG (interface to DNS dig command)
- [[/Applications/MacPorts/Emacs.app/Contents/Resources/lisp/net/dig.el.gz]]
- [[http://stuff.mit.edu/afs/athena/astaff/project/emacs/source/emacs-23.1/lisp/net/dig.el]]

------------------------------------------------------------------------------
* Non Literate

#+NAME: NonLiterate
#+BEGIN_SRC emacs-lisp :comments off
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; XML/HTML
(setq sgml-basic-offset 4)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "WIN32")

;; TODO: factor the following two together.

(defmacro hcRedefProc (procedure args &rest body)
  (let ((original-name
	 (intern (concat "*hc-emacs-original-" (format "%s" procedure) "*"))))
    `(progn
       (defvar ,original-name nil)
       (cond ((and (hcWin32P)
		   (null ,original-name))
	      (setq ,original-name (symbol-function ',procedure))
	      (defun ,procedure	,args ,@body))))))

(defmacro hcRedefVar (variable value)
  (let ((original-name
	 (intern (concat "*hc-emacs-original-" (format "%s" variable) "*"))))
    `(progn
       (defvar ,original-name nil)
       (cond ((and (hcWin32P)
		   (null ,original-name))
	      (setq ,original-name ,variable)
	      (setq ,variable ,value))))))

;; Do this early since it is used during init.
(hcRedefProc user-full-name ()
	 "Harold Carr")

;; Change canonical into win32 (i.e., colon) so emacs can do dir tracking.
;; Same as hcMakeDriveColon script, but do not want to go to shell each time.
(defun hcMakeDriveColon-el (str)
  (if (and (>= (length str) 4)
	   (string-equal (substring str 0 2) "//")
	   (string-equal (substring str 3 4) "/"))
      (concat (substring str 2 3) ":" (substring str 3 (length str)))
    str))

(hcRedefProc file-name-absolute-p (str)
	 (funcall *hc-emacs-original-file-name-absolute-p*
		  (hcMakeDriveColon-el str)))

;(hcRedefProc expand-file-name (file &optional default)
;	 (funcall *hc-emacs-original-expand-file-name*
;		  (hcMakeDriveColon-el file) default))

(cond ((not (hcWin32P))
       (hcRedefVar file-name-buffer-file-type-alist '(("*.*" . t) (".*" . t)))))

(defun hcToggleBinaryModeMap ()
  (interactive)
  (let ((tmp *hc-emacs-original-file-name-buffer-file-type-alist*))
    (setq *hc-emacs-original-file-name-buffer-file-type-alist*
	  file-name-buffer-file-type-alist)
    (setq file-name-buffer-file-type-alist
	  tmp)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "Open current buffer's associated file in an external program")

(defun prelude-open-with ()
  "Simple function that allows us to open the underlying file of a buffer in an external program."
  (interactive)
  (when buffer-file-name
    (shell-command (concat
                    (if (eq system-type 'darwin)
                        "open -a '/Applications/Google Chrome.app'"
                      (read-shell-command "Open current file with: "))
                    " "
                    buffer-file-name))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "Java")

(defvar *hcJavaMode* 'google)
(add-hook 'java-mode-hook
  (lambda () (if (eq *hcJavaMode* 'google) (google-set-c-style))))

;; M-x google-set-c-style
(use-package google-c-style)

;; Make java mode support Java 1.5 annotations.
(use-package java-mode-indent-annotations
  :config
  (add-hook 'java-mode-hook 'java-mode-indent-annotations-setup)
  (add-hook 'java-mode-hook (lambda () (auto-complete-mode 1))))

(setq *compile-threshold* " -XX:CompileThreshold=2 ")

(defun HC-BOOTDIR ()
  (cond ((getenv "HC-ALT_BOOTDIR"))
	(t (let ((HC-ALT_BOOTDIR (HC-ALT_BOOTDIR)))
	     (message (concat "BOOTDIR not set - defaulting to: "
			      HC-ALT_BOOTDIR))
	     HC-ALT_BOOTDIR))))

(defun HC-ALT_BOOTDIR ()
  (let* ((jdir     (concat *hcUlhcd* "/java/jdk/"))
	 (version  (cond ((hcWin32P)  "jdk1.3/win32")
                         ((hcDarwinP) "jdk1.6.0_15/darwin")
                         (t ("jdk1.2.2"))))
	 (location (concat jdir "/" version)))
    (cond ((file-directory-p location)
	   location)
	  (t
	   (error "no default JDK")))))

(defun set-HC-ALT_BOOTDIR (&optional location)
  (interactive)
  (setenv "HC-ALT_BOOTDIR"
	  (cond (location) (t (HC-ALT_BOOTDIR)))))

(defun HC-BOOTDIR-bin     () (concat (HC-BOOTDIR) "/bin"))
(defun HC-BOOTDIR-classes () (concat (HC-BOOTDIR) "/jre/lib/rt.jar"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "Scala")

(use-package scala-mode2
  :defer t
  :config
  (setq scala-indent:step 4))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "LISP and Scheme and Clojure")

(add-to-list 'auto-mode-alist '("\\.el$"      . lisp-interaction-mode))

(add-to-list 'auto-mode-alist '("\\.cl$"      . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.kawa$"    . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.llavarc$" . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.lva$"     . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.lisp$"    . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.lsp$"     . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.scm$"     . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.silk$"    . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.slk$"     . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.skij$"    . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.skj$"     . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.stk$"     . scheme-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Cider/Clojure

(defun hc-cider-insert-and-eval-in-repl-no-switch ()
  "Insert FORM in the REPL buffer and evaluate it.  Do not switch to REPL buffer."
  (interactive)
  (let ((form (cider-last-sexp))
        (start-pos (point)))
    (while (string-match "\\`[ \t\n\r]+\\|[ \t\n\r]+\\'" form)
      (setq form (replace-match "" t t form)))
    (with-current-buffer (cider-current-repl-buffer)
      (insert form)
      (indent-region start-pos (point))
      (cider-repl-return))))

(use-package cider-mode
  :defer nil ;; HC so cider can find 'clojure-project-dir'
  :pin melpa-stable
  :config
  (define-key cider-mode-map (kbd "C-c C-e") #'hc-cider-insert-and-eval-in-repl-no-switch))

(use-package cider
  :defer t
  :pin melpa-stable)


;;;;;;;;;;;;;;;;;;;;;;;;;
;; SLIME setup:
;; http://riddell.us/tutorial/slime_swank/slime_swank.html

;; JSWAT usage:
;; http://bc.tech.coop/blog/081023.html
;; http://groups.google.com/group/clojure/browse_thread/thread/403e593c86c2893f
;; /System/Library/Frameworks/JavaVM.framework/Versions/1.5/Home/
;; /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/
;; /usr/local/hc/java/jswat/jswat-4.3/bin/jswat -jdkhome /System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/ &
;; (slime-connection-port (slime-connection))
;;

(comment
java -server \
     -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8888 \
     -jar /usr/local/hc/java/clojure/clojure_20090320/clojure.jar &
)

(cond (nil ;;(not (hcXEmacsP))
       ;; clojure-mode
       (add-to-list 'load-path (concat (hcUlhcd) "/java/clojure/emacs/clojure-mode"))
       (require 'clojure-mode)

       ;; swank-clojure
       (add-to-list 'load-path (concat (hcUlhcd) "/java/clojure/emacs/swank-clojure"))
       (require 'swank-clojure-autoload)
       (swank-clojure-config
	;;(setq swank-clojure-jar-path (concat (hcUlhcd) "/java/clojure/clojure_20090320/clojure.jar"))
	(setq swank-clojure-binary (concat (hcEsync) "/bin/hcClojure"))
	;;(setq swank-clojure-extra-classpaths (list (concat (hcHome) "/.clojure/clojure-contrib.jar")))
	)

       ;; slime
       (eval-after-load "slime"
	 '(progn (slime-setup '(slime-repl))))

       (add-to-list 'load-path (concat (hcUlhcd) "/java/clojure/emacs/slime"))
       (require 'slime)
       (slime-setup)
      )
)

;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package hcRunCommand)

;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package hcPomCommand)

;;;;;;;;;;;;;;;;;;;;;;;;;
(hcRunCommand clisp hcClispCmd)

(defun hcClispCmd ()
  (cond ((hcWin32P)
	 (concat
	  (hcUlhcd) "/lisp/clisp/clisp-1999-07-22/lisp -M "
	  (hcUlhcd) "/lisp/clisp/clisp-1999-07-22/lispinit.mem"))
	((hcDarwinP)
	 ;;"clisp"
	 "/sw/src/clisp-2.33.2-1/clisp-2.33.2/src/clisp"
	 )
	(t
	 (concat
	  (hcUlhcd) "/lisp/clisp/clisp-1999-01-08/base/lisp.run -M "
	  (hcUlhcd) "/lisp/clisp/clisp-1999-01-08/base/lispinit.mem"))))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand clocc hcCloccCmd)

(defun hcCloccCmd ()
  (if (hcDarwinP)
      (concat "clisp" " -M "
	      " /Volumes/User/sw/lib/clocc/clocc-01-18-04/clocc/clocc-top.mem")
    (error "only configured for darwin")))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand sbcl hcSbclCmd)

(defun hcSbclCmd ()
    (if (hcDarwinP)
      (concat
       (hcUlhcd) "/lisp/sbcl/sbcl-0.8.2.7/src/runtime/sbcl --core "
       (hcUlhcd) "/lisp/sbcl/sbcl-0.8.2.7/output/sbcl.core")
      (error "only configured for darwin")))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand j hcJCmd)

(defun hcJCmd ()
  (concat
   (HC-BOOTDIR-bin) "/java "
   " -classpath "
   (hcUlhcd) "/java/j/j-0.21.0/j.jar"
   (hcPathSep)
   (HC-BOOTDIR-classes)
   (hcPathSep)
   (hcLibClasspath)
   " "
   " -Xss512K "
   " "
   " org.armedbear.lisp.Main"))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand jscheme hcJschemeCmd)

(defun hcJschemeCmd ()
  (concat
   (HC-BOOTDIR-bin) "/java "
   *compile-threshold*
   " -jar "
   (hcUlhcd) "/java/jscheme/jscheme_6_1.jar"))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand kawa hcKawaCmd)

(defun hcKawaCmd ()
  (concat
   (HC-BOOTDIR-bin) "/java "
   *compile-threshold*
   " -classpath "
   (hcUlhcd) "/java/kawa/kawa-1.7.jar"
   (hcPathSep)
   (HC-BOOTDIR-classes)
   (hcPathSep)
   (hcLibClasspath)
   " "
   " kawa.repl"))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcShDefCmd hcLlavaClasspath ())
(hcShDefCmd ripClasspath (javaHome rmiIiopHome))

;;; Hooks so you can add to classpath, vmargs and command line args.

(defun hcLlavaCmdEnvExtras       (ps) "")
(defun hcLlavaCmdClasspathExtras (ps) "")
(defun hcLlavaCmdVmArgsExtras    (ps) "")
(defun hcLlavaCmdMainClass       (ps) (hcLlavaMainClass))
(defun hcLlavaCmdLineArgsExtras  (ps) "")

;;------

(hcRunCommand llava hcLlavaCmd)

(defun hcLlavaCmd ()
  (hcLlavaStartCmd (hcLlavaCmdMainClass (hcPathSep))))

;;------

(hcRunCommand jllava hcJLlavaCmd)

(defun hcJLlavaCmd ()
  (hcLlavaStartCmd
   (concat "-jar " (hcSync) "/.llava.org/.system/jars/llava.jar")))

;;------

(hcRunCommand dljllava hcDLJLlavaCmd)

(defun hcDLJLlavaCmd ()
  (hcLlavaStartCmd
   (concat "-jar " (hcFtptmp) "/llava.jar")))

(defun hcLlavaStartCmd (startup)
  (concat
   (hcLlavaCmdEnvExtras (hcPathSep))
   " "
   (HC-BOOTDIR-bin) "/java "
   *compile-threshold*
   "-Xmx2024m"
   " -classpath "
   (hcLlavaCmdClasspathExtras (hcPathSep))
   (hcPathSep)
   "."
   (hcPathSep)
   (hcLlavaClasspath)
   (hcPathSep)
   (HC-BOOTDIR-classes)
   (hcPathSep)
   (hcLibClasspath)
   (hcPathSep)
   " "
   " -Duser.home=" (hcHome)
   " "
;;   " -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y "
   " "
   (hcLlavaCmdVmArgsExtras (hcPathSep))
   " "
   startup
   " "
   (hcLlavaCmdLineArgsExtras (hcPathSep))))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcShDefCmd hcSkijClasspath ())

(hcRunCommand skij hcSkijCmd)

(defun hcSkijCmd ()
  (concat
   (HC-BOOTDIR-bin) "/java "
   " -classpath "
   "."
   (hcPathSep)
   (hcSkijClasspath)
   (hcPathSep)
   (HC-BOOTDIR-classes)
   (hcPathSep)
   (hcLibClasspath)
   (hcPathSep)
   (hcLlavaCmdClasspathExtras (hcPathSep))
   " "
   " -Duser.home=" (hcHome)
   " "
   (hcLlavaCmdVmArgsExtras (hcPathSep))
   " "
   " com.ibm.jikes.skij.Scheme"
   " "
   (hcLlavaCmdLineArgsExtras (hcPathSep))))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand silk hcSilkCmd)

(defun hcSilkCmd ()
  (concat
   (HC-BOOTDIR-bin) "/java "
   " -classpath "
   "."
   (hcPathSep)
   (hcUlhcd) "/java/silk/v3.0-99-10-31/silk/jar/scheme.jar"
   (hcPathSep)
   (HC-BOOTDIR-classes)
   (hcPathSep)
   (hcUlhcd) "\\java\\jdk1.2.1\\jre\\lib\\tools.jar"
   (hcPathSep)
   (hcLibClasspath)
   (hcPathSep)
   (hcLlavaCmdClasspathExtras (hcPathSep))
   " "
   " -Duser.home=" (hcHome)
   " "
   (hcLlavaCmdVmArgsExtras (hcPathSep))
   " "
   " silk.Scheme generic/load.scm"))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand MzScheme hcMzSchemeCmd)

(defun hcMzSchemeCmd ()
  (concat (hcUlhcd) "/lisp/plt/202/plt/bin/mzscheme"))

;;;;;;;;;;;;;;;;;;;;;;;;;

(hcRunCommand hcTelnetClient hcTelnetClientCmd)

(defun hcTelnetClientCmd ()
  (concat
   (HC-BOOTDIR-bin) "/java "
   " -classpath "
   (concat (hcEsync) "/java/.classes")
   (hcPathSep)
   (hcUlhcd) "/java/jta/jta20/.classes"
   " "
   " hc.net.TelnetClient localhost 4444"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "C")

;;(load "c-mode")

(setq c-indent-level 4)
;(setq c-continued-statement-offset 4)
;(setq c-brace-offset -4)
;(setq c-argdecl-indent 4)
;(setq c-label-offset -2)

;;(load "c++-mode")

(add-to-list 'auto-mode-alist '("\\.idl$"  . c++-mode))
(add-to-list 'auto-mode-alist '("\\.c$"    . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h$"    . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cc$"   . c++-mode))
(add-to-list 'auto-mode-alist '("\\.hh$"   . c++-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "Appearance")

;; C-U C-X = : shows current font

(defun hc-h (n) (set-frame-height (selected-frame) n))
(defun hc-w (n) (set-frame-width (selected-frame) n))
(defun hc-hw (x y) (hc-h x) (hc-w y))
(defun hc-hwd () (interactive) (hc-h 38) (hc-w 80))

(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;;(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;;This turns of the mac os x menu bar
;;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(defun hcGreyBackground ()
  (interactive)
  (set-face-background 'default "grey")
  )

(defun hcRightScrollBar ()
  (interactive)
  ;(scroll-bar-mode -1) ;; turn off
  (set-scroll-bar-mode 'right)
  )

(defun hcAppearance ()
  (interactive)
  (hcGreyBackground)
  (hcRightScrollBar)
  )

(defun hcHostedFont ()
  (interactive)
  (set-face-font 'default "-unknown-DejaVu LGC Sans Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")
  )

(defun hcHostedWidthHeight ()
  (interactive)
  (hc-w 160)
  (hc-h 43)
  )

(defun hcHostedAppearance ()
  (interactive)
  (hcAppearance)
  (hcHostedFont)
  (hcHostedWidthHeight)
  )

(defun hcMacFont ()
  (interactive)
;;(set-face-font 'default "-apple-Monaco-medium-normal-normal-*-16-*-*-*-m-0-iso10646-1")
;;(set-face-font 'default "-apple-Monaco-medium-normal-normal-*-18-*-*-*-m-0-iso10646-1")
(set-face-font 'default "-apple-Monaco-medium-normal-normal-*-20-*-*-*-m-0-iso10646-1")
;;(set-frame-font "Source Code Pro-21" nil t)
;;(set-face-font 'default "-apple-Monaco-medium-normal-normal-*-21-*-*-*-m-0-iso10646-1")
  )

(defun hcMacWidthHeight ()
  (interactive)
  (hc-w 100)
  (hc-h 27)
  )

(defun hcMacFW ()
  (interactive)
  (hcMacWidthHeight)
  (hcMacFont)
  )

(defun hcMacAppearance ()
  (interactive)
  (hcAppearance)
  (hcMacFont)
  (hcMacWidthHeight)
  )

;; Toggle buffer tabs
(defun hcToggleBufferTabs ()
  (interactive)
  (if (eq emacs-version 21.4)
      (customize-set-variable 'gutter-buffers-tab-visible-p
			      (not gutter-buffers-tab-visible-p))))

;; Toggle tool bar
(setq *hc-toggle-toolbar-value* -1)
(defun hcToggleToolbar ()
  (interactive)
  (if (eq emacs-major-version 21)
      (cond ((string-match "XEmacs\\|Lucid" emacs-version)
	     (set-specifier default-toolbar-visible-p
			    (not (specifier-instance default-toolbar-visible-p))))
	    ((string-match "sparc-sun-solaris2.10" (emacs-version))
	     (tool-bar-mode *hc-toggle-toolbar-value*)
	     (setq *hc-toggle-toolbar-value* (- *hc-toggle-toolbar-value*)))
	    (t
	     (tool-bar-mode (not toolbar-active))))))

;; SHORTHAND
(defun hctoggle () (interactive) (hcToggleBufferTabs) (hcToggleToolbar))

(defun hcf ()
  (set-default-font
   "-Adobe-Courier-Bold-R-Normal--14-140-75-75-M-90-ISO8859-1"))

;; Good for laptop lcd.
;; Do (w32-select-font) to discover font names
(defun hcLucidaBold10 ()
  (interactive)
  (set-default-font
   ;; NT
   ;;"-*-Lucida Console-normal-r-*-*-20-120-*-*-c-*-*-ansi-"
   ;; Win95
   "-*-Courier New-bold-r-*-*-20-100-*-*-c-*-*-ansi-"))

;; Good for 21 inch monitor with laptop.
(defun hcFixReg9-21 ()
  (interactive)
  (set-default-font "-*-Fixedsys-normal-r-*-*-12-90-*-*-c-*-*-ansi-"))

;; Setting background from elisp under NT causes weird behavior.
;; Instead I set using -fg and -bg in .bat file.

;; type fc-list on command line to see fonts installed

(defun hcSetDisplay ()
  (hc-h 32)
  (hc-w 80)
  (cond ((hcXP)
         ;;(set-face-attribute 'default nil :family "courier" :height 140)
         ;;(set-face-attribute 'default nil :family "courier" :height 160)
         ;;(set-face-attribute 'default nil :family "courier" :height 170)
         ;;(set-face-attribute 'default nil :family "courier" :height 180)
         ;;(set-face-attribute 'default nil :family "courier" :height 200)
         ;;(set-face-attribute 'default nil :family "courier" :height 220)

	 ;;(set-face-font 'default "-adobe-courier-medium-o-normal--18-180-75-75-m-110-iso8859-2")

	 ;;(set-face-font 'default "-*-Courier-Medium-R-*-*-*-160-72-72-*-*-iso8859-1")
	 ;;(set-face-font 'modeline "-*-Courier-medium-R-*-*-*-160-72-72-*-*-iso8859-1")
	 ;; 9x15 bold
	 ;;(set-face-font 'default "-misc-fixed-bold-r-normal-*-*-140-*-*-c-*-iso8859-1")
	 (set-face-font 'default "-*-Lucida Sans Typewriter-Medium-R-*-*-*-200-*-*-*-*-iso8859-1")
	 (set-face-font 'modeline "-*-Lucida Sans Typewriter-medium-R-*-*-*-200-*-*-*-*-iso8859-1")

	 ;(set-face-font 'default "-apple-courier-bold-r-normal--18-180-72-72-m-180-iso10646-1")
	 ;(set-face-font 'default "-apple-courier-bold-r-normal--18-0-72-72-m-0-iso10646-1")

         ;;; Background
	 (set-face-background 'default "#9900991b99fe") ; grey

	 ;; 90 = 144; 60 = 96; 60 = 96
	 ;;(set-face-background 'default "#900060006000") ; earthy red
	 ;; 222 = de; 184 = b8; 135= 87
	 ;;(set-face-background 'default "#de00b8008700") ; earthy orange
	 ;;(set-face-background 'default "#737373737373") ; grey
	 (set-face-background 'default "#6a6a6a6a6a6a") ; grey
	 ;;(set-face-background 'default "DarkSlateGrey")
	 ;;(set-face-background 'default "grey")
         ;;(defined-colors)
         ;; ("snow" "ghost white" "GhostWhite" "white smoke" "WhiteSmoke" "gainsboro" "floral white" "FloralWhite" "old lace" "OldLace" "linen" "antique white" ...)
	 ;;(set-face-background 'default "antique white")
	 ;;(set-face-background 'default "grey99")
	 ;;(set-face-background 'default "White")
	 ;; this one:
	 ;;(set-face-background 'default "#b9b9b9b9b9b9")
	 ;;(set-face-background 'default "#dddddddddddd")
	 ;; 68 = 104; 6f = 111; 82 = 130
	 ;;(set-face-background 'default "#68006f008200") ; blue
	 ;;(set-face-background 'default "Black")

         ;;; Foreground
	 ;;(set-face-foreground 'default "Green")
	 ;;(set-face-foreground 'default "DarkSlateGrey")
	 ;;(set-face-foreground 'default "#de00b8008700") ; earthy orange
	 (set-face-foreground 'default "Black")
	 ;;(set-face-foreground 'default "white")

	 ;; Mark to region.
	 (cond ((hcLucidP)
		(set-face-background 'primary-selection "grey")
		(set-face-foreground 'primary-selection "black")))

	 ;; Incremental search.
	 (cond ((hcLucidP)
		(set-face-foreground 'isearch "black")
		(set-face-background 'isearch "green")))
	 ;; Toolbar.
	 (cond ((hcLucidP)
		(set-specifier default-toolbar-visible-p nil)))

	 (cond ((hcLucidP)
		(turn-off-font-lock)))
	 )

	((hcWin32P)
	 ;(hcLucidaBold10)
	 (hcFixReg9-21)
	 )))

;(hcSetDisplay)

(comment
(global-font-lock-mode -1)

(setq font-lock-auto-fontify nil)
(set-face-foreground 'default "Black")

(cond ((hcLucidP)
       (set-face-reverse-p 'modeline nil))
      (t
       (setq mode-line-inverse-video nil)))
)

;; Turn off font-lock?
(defun hcFontLockModeHook ()
  (if (fboundp 'global-font-lock-mode)
      (global-font-lock-mode -1) ;; Emacs
    (setq font-lock-auto-fontify nil))
  (setq font-lock-mode-enable-list nil)
  (setq font-lock-maximum-size 0))


(comment
(cond ((fboundp 'global-font-lock-mode)
            ;; Turn on font-lock in all modes that support it
            (global-font-lock-mode t)
	    (setq font-lock-support-mode 'lazy-lock-mode)
            ;; maximum colors
            ;(setq font-lock-maximum-decoration t)
;; Customize face attributes
            (setq font-lock-face-attributes
                  ;; Symbol-for-Face Foreground Background Bold Italic
Underline
                  '((font-lock-comment-face       "DarkGreen")
                    (font-lock-string-face        "Black")
                    (font-lock-keyword-face       "RoyalBlue")
                    (font-lock-function-name-face "Blue")
                    (font-lock-variable-name-face "Black")
                    (font-lock-type-face          "Black")
                    (font-lock-reference-face     "Purple")))
            ;; Create the faces from the attributes
;           (font-lock-make-faces)
            ))
)

(cond ((hcDarwinP)
       (load-theme 'zenburn)
       (hcMacFW)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "HC Commands")

(defun hc-current-line ()
  (interactive)
  "Return line number containing point."
  (let ((result 1))
    (save-excursion
      (beginning-of-line)
      (while (not (bobp))
	(forward-line -1)
	(setq result (+ result 1))))
    result))

;; Modified from compile.
(defun hc-grep-find-no-scc (command-args)
  "Same as grep-find except skips source code control directories."
  (interactive
   (let ((grep-find-command
	  (cons (format "find . -type d \\( -name SCCS -o -name RCS -o -name .svn \\) -prune -o -type f -exec %s {} /dev/null \\;"
			grep-command)
		(+ 70 (length grep-command)))))
     (progn
       (unless grep-find-command
	 (grep-compute-defaults))
       (list (read-from-minibuffer "Run find (like this): "
				   grep-find-command nil nil
				   'grep-find-history)))))
  (let ((null-device nil))		; see grep
    (grep command-args)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "Syntax")

;; Make -, * and . letters.

(cond (nil
       (modify-syntax-entry ?- "w" lisp-mode-syntax-table)
       (modify-syntax-entry ?. "w" lisp-mode-syntax-table)
       (modify-syntax-entry ?* "w" lisp-mode-syntax-table)
       (modify-syntax-entry ?_ "w" lisp-mode-syntax-table)
       (modify-syntax-entry ?: "w" lisp-mode-syntax-table)))

;; NT: c-mode-syntax-table not defined *****
(cond (nil
       (modify-syntax-entry ?- "w" c-mode-syntax-table)
       (modify-syntax-entry ?. "w" c-mode-syntax-table)
       (modify-syntax-entry ?* "w" c-mode-syntax-table)
       (modify-syntax-entry ?_ "w" c-mode-syntax-table)))

(cond (nil
       (modify-syntax-entry ?- "w" text-mode-syntax-table)
       (modify-syntax-entry ?. "w" text-mode-syntax-table)
       (modify-syntax-entry ?* "w" text-mode-syntax-table)
       (modify-syntax-entry ?_ "w" text-mode-syntax-table)))

(cond (nil
       (modify-syntax-entry ?- "w" (standard-syntax-table))
       (modify-syntax-entry ?. "w" (standard-syntax-table))
       (modify-syntax-entry ?* "w" (standard-syntax-table))
       (modify-syntax-entry ?_ "w" (standard-syntax-table))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "Portability")

(if (not (boundp 'directory-sep-char))
    (setq directory-sep-char 47))

(if (not (fboundp 'file-name-extension))
    (defun file-name-extension (filename &optional period)
      "Return FILENAME's final \"extension\".
The extension, in a file name, is the part that follows the last `.'.
Return nil for extensionless file names such as `foo'.
Return the empty string for file names such as `foo.'.

If PERIOD is non-nil, then the returned value includes the period
that delimits the extension, and if FILENAME has no extension,
the value is \"\"."
      (save-match-data
        (let ((file (file-name-sans-versions (file-name-nondirectory filename))))
          (if (string-match "\\.[^.]*\\'" file)
              (substring file (+ (match-beginning 0) (if period 0 1)))
            (if period
                ""))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(hcSection "custom-set-variables/faces")

;; IMPORTANT: Init file should contain only ONE custom-set-faces and ONE custom-set-variables

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(load-home-init-file t t)
 '(nxml-child-indent 4)
 '(send-mail-function (quote smtpmail-send-it))
)


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

 '(proof-locked-face ((t (:background "#8d8d8d"))) t)
 '(w3m-haddock-heading-face ((t (:background "selectedKnobColor"))))
;; '(w3m-haddock-heading-face ((t (:background "controlDarkShadowColor"))))
)
#+END_SRC

#+NAME: EOF
#+BEGIN_SRC emacs-lisp :comments off
(provide 'hcVanilla)

;;; End of file.
#+END_SRC

# End of file.
